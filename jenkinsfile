pipeline {
  agent any

  environment {
    registryCredentials = "nexus"
    registry = "172.19.96.13:8083"
    SONARQUBE_URL = "http://172.19.96.13:9000"  // Adresse correcte de SonarQube
    SONARQUBE_CREDENTIALS = "scannerr:{AQAAABAAAAAwg65F6yTMBh8+1TeE7qyG5EFKn0jFx5drrAo/ibru8YmRNZgSH2zm4HpYaxO46emPMmFY0hcRRRNZd3zf6QnjUw==}"  // ID du credential Jenkins (API Token SonarQube)
  }

  stages {

    stage('Install dependencies') {
      steps {
        script {
          sh('npm install')
        }
      }
    }

    stage('Unit Test') {
      steps {
        script {
          sh('npm test')
        }
      }
    }

    stage('SonarQube Analysis') {
      steps {
        script {
          withSonarQubeEnv('SonarQube') {  // Assure-toi que 'SonarQube' est bien configur√© dans Jenkins
            sh 'mvn sonar:sonar -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.login=${SONARQUBE_CREDENTIALS}'
          }
        }
      }
    }

    stage('Build application') {
      steps {
        script {
          sh('npm run build-dev')
        }
      }
    }

    // Building Docker images
    stage('Building images (node and mongo)') {
      steps {
        script {
          sh('docker-compose build')
        }
      }
    }

    // Uploading Docker images into Nexus Registry
    stage('Deploy to Nexus') {
      steps {
        script {
          docker.withRegistry("http://${registry}", registryCredentials) {
            sh("docker push ${registry}/nodemongoapp:6.0")
          }
        }
      }
    }

    stage('Run application') {
      steps {
        script {
          docker.withRegistry("http://${registry}", registryCredentials) {
            sh("docker pull ${registry}/nodemongoapp:6.0")
            sh("docker-compose up -d")  // Ajoute `-f fichier.yml` si besoin
          }
        }
      }
    }

    stage("Run Prometheus") {
      steps {
        script {
          sh('docker start prometheus || docker run -d --name prometheus prom/prometheus') 
        }
      }
    }

    stage("Run Grafana") {
      steps {
        script {
          sh('docker start grafana || docker run -d --name grafana grafana/grafana')
        }
      }
    }
  }
}
